%% ¡header!
NNSubject < Subject (sub, subject for neural network analysis) is a subject for a neural network analysis.

%%% ¡description!
NNSubject contains the required information for a neural network analysis.

%%% ¡seealso!
NNGroup, NNData

%% ¡constants!
INPUT_MEASURES = 'Graph Measures'
INPUT_STRUCTURAL = 'Structural Data'
INPUT_ADJACENCY = 'Adjacency Matrices'

INPUT_TYPES = {
    NNSubject.INPUT_MEASURES
    NNSubject.INPUT_STRUCTURAL
    NNSubject.INPUT_ADJACENCY
    }

%% ¡props_update!

%%% ¡prop!
NAME (constant, string) is the name of the subject for neural network analysis.
%%%% ¡default!
'NNSubject'

%%% ¡prop!
DESCRIPTION (constant, string) is the description of the subject for neural network analysis.
%%%% ¡default!
'NNSubject contains the required information for a neural network analysis.'

%%% ¡prop!
TEMPLATE (parameter, item) is the template of the subject for neural network analysis.
%%%% ¡settings!
'NNSubject'

%%% ¡prop!
ID (data, string) is a few-letter code for the subject for neural network analysis.
%%%% ¡default!
'NNSubject ID'

%%% ¡prop!
LABEL (metadata, string) is an extended label of the subject for neural network analysis.
%%%% ¡default!
'NNSubject label'

%%% ¡prop!
NOTES (metadata, string) are some specific notes about the subject for neural network analysis.
%%%% ¡default!
'NNSubject notes'

%% ¡props!

%%% ¡prop!
G (data, item) is a graph for the subject.
%%%% ¡settings!
'Graph'

%%% ¡prop!
INPUT_TYPE (data, option) indicates the data type associated to the subject.
%%%% ¡settings!
INPUT_TYPES

%%% ¡prop!
INPUT (data, cell) contains the subject data.
%%%% ¡_gui!
% % % if ~braph2_testing
% % %     ba = sub.get('BA');
% % %     switch sub.get('INPUT_TYPE')
% % %         case NNSubject.INPUT_MEASURES
% % %             pr = PPNNSubjectInputMeasure('EL', sub, 'PROP', NNSubject.INPUT, 'BA', ba, 'INPUT_LABEL', sub.get('INPUT_LABEL'), varargin{:});
% % %             pr.set('XSLIDERLABELS', 'el.measure_types()');
% % % 
% % %         case NNSubject.INPUT_STRUCTURAL
% % %             pr = PPNNSubjectInputStructuralData('EL', sub, 'PROP', NNSubject.INPUT, 'BA', ba, varargin{:});
% % %         
% % %         case NNSubject.INPUT_ADJACENCY
% % %             pr = PPNNSubjectInputAdjacency('EL', sub, 'PROP', NNSubject.INPUT, 'BA', ba, varargin{:});
% % %         
% % %         otherwise
% % %             pr = PanelPropCell('EL', sub, 'PROP', NNSubject.INPUT, varargin{:});
% % %     end
% % % end

%%% ¡prop!
FEATURE_MASK (data, cell) determines which data to use (e.g., using a feature score map generated by mutual information analysis).
%%%% ¡_gui!
% % % if ~braph2_testing
% % %     ba = sub.get('BA');
% % %     if string(sub.get('INPUT_TYPE')) == 'graph_measures'
% % %         pr = PPNNSubjectInputMeasure('EL', sub, 'PROP', NNSubject.FEATURE_MASK, 'BA', ba, 'INPUT_LABEL', sub.get('INPUT_LABEL'), varargin{:});
% % %         pr.set('XSLIDERLABELS', 'el.measure_types()');
% % %     elseif string(sub.get('INPUT_TYPE')) == 'structural_data'
% % %         pr = PPNNSubjectInputStructuralData('EL', sub, 'PROP', NNSubject.FEATURE_MASK, 'BA', ba, varargin{:});
% % %     elseif string(sub.get('INPUT_TYPE')) == 'adjacency_matrices'
% % %         pr = PPNNSubjectInputAdjacency('EL', sub, 'PROP', NNSubject.FEATURE_MASK, 'BA', ba, varargin{:});
% % %     else
% % %         pr = PanelPropCell('EL', sub, 'PROP', NNSubject.FEATURE_MASK, varargin{:});
% % %     end
% % % end

%%% ¡prop!
INPUT_LABEL (data, classlist) represents the the label of input, which can be either graph or measure. % % % ADD a check that only Graphs and Measures are selected

%%% ¡prop!
MASKED_INPUT (result, cell) is a masked input with a feature mask.
%%%% ¡calculate!
feature_mask = sub.get('FEATURE_MASK');
if isempty(feature_mask)
    masked_input = {};
else
    input = sub.get('INPUT');
    for i = 1:1:length(feature_mask)
        input_per_cluster = input{i};
        mask_per_cluster = feature_mask{i};
        input_per_cluster(mask_per_cluster == 0) = 0;
        masked_input{i} = input_per_cluster;
    end
end

value = masked_input;

%%% ¡prop!
TARGET_NAME (data, string) is the name of the target for the neural network analysis.

%%% ¡prop!
TARGET (metadata, cell) is the encoded values of a target for the neural network analysis.

%%% ¡prop!
PREDICTION (data, cell) is the prediction of the subject from the neural network analysis.

%%% ¡prop!
BA (metadata, item) is a brain atlas used for visualization.
%%%% ¡settings!
'BrainAtlas'
%%%% ¡default!
BrainAtlas()

%% ¡_staticmethods!
% % % function lbls = measure_types()
% % %     lbls = {'Global', 'Nodal', 'Binodal'};
% % % end