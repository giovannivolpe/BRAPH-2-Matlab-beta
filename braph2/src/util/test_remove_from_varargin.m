%TEST_REMOVE_FROM_VARARGIN

%% Test 1: Empty
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    handle = 'h';
    varargin = {};
    expected_varargin = {};
    assert(isequal(remove_from_varargin(handle, varargin), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
    assert(isequal(remove_from_varargin(handle, varargin{:}), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
end

%% Test 2: Full with value
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    handle = 'h';

    varargin = {'h', 1};
    expected_varargin = cell(1, 0);
    assert(isequal(remove_from_varargin(handle, varargin), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
    assert(isequal(remove_from_varargin(handle, varargin{:}), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')

    varargin = {'h', 1.1, 'h', 1.2};
    expected_varargin = {'h', 1.2};
    assert(isequal(remove_from_varargin(handle, varargin), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
    assert(isequal(remove_from_varargin(handle, varargin{:}), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')

    varargin = {'h', 1, 'h1', 'none', 'h', 2, 'h2', 'none', 'h', 3};
    expected_varargin = {'h1', 'none', 'h', 2, 'h2', 'none', 'h', 3};
    assert(isequal(remove_from_varargin(handle, varargin), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
    assert(isequal(remove_from_varargin(handle, varargin{:}), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')

    varargin = {'h1', 'none', 'h', 4, 'h2', 'none', 'h', 3};
    expected_varargin = {'h1', 'none', 'h2', 'none', 'h', 3};
    assert(isequal(remove_from_varargin(handle, varargin), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
    assert(isequal(remove_from_varargin(handle, varargin{:}), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')

    varargin = {'h1', 'none', 'h2', 'none', 'h', 3};
    expected_varargin = {'h1', 'none', 'h2', 'none'};
    assert(isequal(remove_from_varargin(handle, varargin), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
    assert(isequal(remove_from_varargin(handle, varargin{:}), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
end

%% Test 3: Full without value
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    handle = 'h';

    varargin = {'h1', 'none', 'h2', 'none'};
    expected_varargin = {'h1', 'none', 'h2', 'none'};
    assert(isequal(remove_from_varargin(handle, varargin), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
    assert(isequal(remove_from_varargin(handle, varargin{:}), expected_varargin), ...
        [BRAPH2.STR ':remove_from_varargin:' BRAPH2.FAIL_TEST], ...
        'Error with full varargin.')
end