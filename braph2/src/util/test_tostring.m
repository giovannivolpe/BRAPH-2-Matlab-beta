%TEST_TOSTRING

%% Test 1: Object with tostring
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(DummyObject('NAME')), 'DummyObject ''NAME'''), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with object with tostring.')
end

%% Test 2: Object empty string
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(""), '""'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with empty string.')
end

%% Test 3: Object non-empty string
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring("trial"), '"trial"'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with non-empty string.')
end

%% Test 4: Object without tostring
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(BRAPH2()), 'BRAPH2'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with object without tostring.')
end

%% Test 5: Empty number
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring([]), '[]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with empty number.')
end

%% Test 6: Scalar number
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(1), '1'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with scalar number.')
    assert(strcmp(tostring(3.14), '3.14'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with scalar number.')
end

%% Test 7: Other number
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(rand(1, 2)), '[1 x 2]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other number.')
    assert(strcmp(tostring(rand(2, 1)), '[2 x 1]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other number.')
    assert(strcmp(tostring(rand(4)), '[4 x 4]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other number.')
    assert(strcmp(tostring(rand(1, 2, 3, 4)), '[1 x 2 x 3 x 4]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other number.')
end

%% Test 8: Scalar logical
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(true), 'true'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with scalar logical.')
    assert(strcmp(tostring(false), 'false'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with scalar logical.')
end

%% Test 9: Other logical
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(true(1, 2)), 'bool[1 x 2]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other logical.')
    assert(strcmp(tostring(false(2, 1)), 'bool[2 x 1]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other logical.')
    assert(strcmp(tostring(true(4)), 'bool[4 x 4]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other logical.')
    assert(strcmp(tostring(false(1, 2, 3, 4)), 'bool[1 x 2 x 3 x 4]'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with other logical.')
end

%% Test 10: Empty char array 
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(''), ''''''), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with empty char array.')
end

%% Test 11: Non-empty char array 
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring('trial'), '''trial'''), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with non-empty char array.')
    assert(strcmp(tostring('trial''with''apostrophes'), '''trial''''with''''apostrophes'''), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with non-empty char array.')
end

%% Test 12: Empty cell array
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring({}), '{}'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with empty cell array.')
    assert(strcmp(tostring(cell(0)), '{}'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with empty cell array.')
    assert(strcmp(tostring(cell(1, 0)), '{}'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with empty cell array.')
    assert(strcmp(tostring(cell(0, 1)), '{}'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with empty cell array.')
end

%% Test 13: Non-empty cell array
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
    assert(strcmp(tostring(cell(2)), '{2 x 2 [] [] [] []}'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with cell array.')
    assert(strcmp(tostring({cell(2, 1), cell(3, 1)}), '{1 x 2 {2 x 1 [] []} {3 x 1 [] [] []}}'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with cell array.')
    assert(strcmp(tostring({"1", "2"; 3, '4'}), '{2 x 2 "1" 3 "2" ''4''}'), ...
        [BRAPH2.STR ':tostring:' BRAPH2.FAIL_TEST], ...
        'Error with cell array.')
end